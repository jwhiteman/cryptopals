# on padding:
- https://crypto.stackexchange.com/questions/58982/understanding-how-padding-works-when-using-block-cipher
- https://cryptosys.net/pki/manpki/pki_paddingschemes.html

¬
∧
∨
→
↔︎
⊕
≣
≢
∅
⊂
⊃
∀
∃
⊆
⊇

So, how the CBC oracle works. Start by drawing out how CBC decryption works for two contiguous
ciphertext blocks, c1 and c2.

Then you can see that the final plaintext byte of the 2nd block (p2) is calculated by

c1[15] ⊕ X[15] = p2[15]

Where X is the value of the decrypted p2 block prior to XOR'ing with c1.

If there is a padding oracle we can exploit, then we can have it tell us when we achieve

c'1[15] ⊕ X[15] ⊕ 1 = 1

Where c'1 is a version of c1 where we fucked with the last byte.

Once we get here, then we have calculated X[15].

It's exactly equal to c'1[15], because they had to XOR to 0.

Now we can use the original equation to find P2[15]

1. c1[15] ⊕ X[15] = p2[15]
2. X[15] = c'1[15]
3. c1[15] ⊕ c'1[15] = p2[15].

To get p2[14], we do the same thing, starting with the fact that

c1[14] ⊕ X[14] = p2[14]

The dumdum oracle will be sure to tell us when we've got p2[14] = 2 and p2[15] = 2

(algorithm note: we've got c'1[15]/X[15] value that XOR to zero from the previous work on
figuring out p2[15], so we can use c'1[15] ⊕ 2 to force p2[15] to 2).

 then we can figure out p2[14].
 
 It's c1[14] ⊕ c'1[14], from the exact same steps as above: we use c'1[14] as x[14]
 and then solve for p2[14].
 
 TODO: what if the block itself is already, validly x01?
 TODO: what if the block is all padding (i.e to "pad" a block that is full)
 TODO: explain how to get the first block, via the IV
 TODO: look up: what shit-for-brains hands out the IV?